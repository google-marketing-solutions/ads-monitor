{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ads Monitor","text":"<p>Ads Monitor provides a way to expose a set of custom defined Ads metrics and dimensions in a Prometheus format which make it possible to reuse widely available monitoring and alerting tool (i.e. Grafana and Alertmanager) to setup a solid monitoring environment for your crucial Ads metrics and dimensions.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Collects data from your Google Ads frequently (i.e. every 15 minutes)</li> <li>Finds problems with metrics and dimensions</li> <li>Sends alerts</li> <li>Visualizes data in the pre-built or custom monitoring dashboards</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>There are two ways to install Ads Monitor: using Google Cloud Platform (recommended) or manually using Docker Compose.</p>"},{"location":"#google-cloud","title":"Google Cloud","text":"<p>This method deploys Ads Monitor on Google Compute Engine with all necessary components configured automatically.</p> <p>Prerequisites:</p> <ul> <li>Google Cloud project with billing enabled</li> <li> <p>Google Ads API access and google-ads.yaml file</p> </li> <li> <p>Clone this repository and navigate to its directory</p> </li> <li> <p>Run the deployment script:</p> </li> </ul> <pre><code>bash deploy.sh deploy_all --account-id YOUR_MCC_ID [OPTIONS]\n</code></pre> <p>Available options:</p> <ul> <li><code>--account-id</code>: (Required) Your Google Ads Account ID</li> <li><code>--project-id</code>: Google Cloud project ID (defaults to current gcloud config)</li> <li><code>--zone</code>: GCP zone for deployment (defaults to us-central1-a)</li> <li><code>--expose-prometheus</code>: Flag to expose Prometheus and Alertmanager ports (optional)</li> <li><code>--google-ads-yaml</code>: Path to your google-ads.yaml file (defaults to google-ads.yaml in current directory)</li> </ul> <p>The script will:</p> <ul> <li>Create necessary GCP resources (Compute Instance, disk, firewall rules)</li> <li>Deploy and configure all components (Gaarf Exporter, Prometheus, Grafana, Alertmanager)</li> <li>Provide you with access URLs once deployment is complete</li> </ul> <p>Note: When accessing Grafana for the first time, use the default credentials (username: admin, password: admin). You will be prompted to change the password upon first login.</p> <p>To remove the deployment (or parts of it):</p> <pre><code>bash cleanup.sh [COMPONENT]\n</code></pre> <p>Where COMPONENT can be: mig, template, firewall, disk, or all (default)</p>"},{"location":"#docker-compose","title":"Docker Compose","text":"<p>Alternatively, you can run Ads Monitor locally using Docker Compose.</p> <p>Prerequisites:</p> <ul> <li>Docker Compose installed</li> <li>Google Ads API access and google-ads.yaml file</li> </ul> <p>Run:</p> <ul> <li>Export required environment variables:</li> </ul> <pre><code>export GOOGLE_ADS_YAML=/path/to/google-ads.yaml\nexport GAARF_EXPORTER_ACCOUNT_ID=&lt;YOUR_MCC_ID&gt;\n</code></pre> <p>If you don't specify the GOOGLE_ADS_YAML variable, Ads Monitor will look for google-ads.yaml in your $HOME directory.</p> <ul> <li>Start the containers:</li> </ul> <pre><code>docker compose up\n</code></pre> <p>This command will pull <code>gaarf_exporter</code> image and start scraping Google Ads every 15 minutes, pull latest images of Prometheus, AlertManager and Grafana.</p>"},{"location":"#usage","title":"Usage","text":"<p>Once Ads Monitor up and running you may proceed with the following steps:</p> <ul> <li>Creating rules and alerts</li> <li>Sending notifications</li> <li>Creating dashboards</li> </ul>"},{"location":"ecosystem/alertmanager/","title":"Alertmanager","text":"<p>Ads Monitor relies on Alertmanager to deliver notifications to recipients. Please refer to the documentation on prometheus.io website.</p>"},{"location":"ecosystem/grafana/","title":"Grafana","text":"<p>Ads Monitor uses Grafana to visualize the metrics and / or alerts via dashboard.</p>"},{"location":"ecosystem/grafana/#pre-built-dashboards","title":"Pre-built dashboards","text":"<p>You can explore existing Grafana dashboards that are compatible with Ads Monitor</p> <ul> <li><code>default</code> - monitors base metrics such as clicks, impressions, cost, conversions.</li> <li><code>budgets</code> - monitors budget utilization.</li> <li><code>approvals</code> - monitors policy approval statuses.</li> <li><code>new entities</code> - monitors new campaigns / ad groups in the accounts.</li> <li><code>internal_metrics</code> - monitors health of Ads Monitor and API quota usage.</li> </ul>"},{"location":"ecosystem/prometheus/","title":"Prometheus","text":"<p><code>gaarf_exporter</code> exports data in the format that can be easily scraped by Prometheus.</p>"},{"location":"ecosystem/prometheus/#configuring","title":"Configuring","text":"<p>Create <code>prometheus.yml</code> file.</p> <pre><code>global:\n  scrape_interval: 30s\n  evaluation_interval: 30s\nalerting:\n  alertmanagers:\n    - static_configs:\n      - targets:\n        - localhost:9093\nscrape_configs:\n  - job_name: 'gaarf'\n    scrape_interval: 30s\n    static_configs:\n      - targets: ['localhost:8000']\n</code></pre>"},{"location":"ecosystem/prometheus/#adding-new-target-to-existing-prometheusyml","title":"Adding new target to existing prometheus.yml","text":"<p>Since <code>gaarf_exporter</code> exposed metrics as HTTP server you need to add the following target in your <code>prometheus.yml</code>.</p> <pre><code>- job_name: 'gaarf'\n  honor_labels: true\n  scrape_interval: 30s\n  static_configs:\n    - targets: ['gaarf_exporter:8000']\n</code></pre>"},{"location":"ecosystem/prometheus/#defining-rules","title":"Defining rules","text":"<p>Please refer to alerting rules documentation  on prometheus.io for more details.</p>"},{"location":"exporter/collectors/","title":"Collectors","text":"<p>Exporting data from Google Ads is done via collectors. Collector represents a query associated with a short alias. Collectors can be bundled into registries to simplify getting common set of metrics.</p> <p>You can specify collectors with <code>--collectors &lt;collector_name&gt;</code> CLI argument. Some collectors available by default, other you need to specify explicitly.</p> <p>There are two types of collectors - registry (contains other collectors grouped logically) and collectors themselves.</p>"},{"location":"exporter/collectors/#registries","title":"Registries","text":""},{"location":"exporter/collectors/#default","title":"<code>default</code>","text":"<ul> <li><code>performance</code> - extracts clicks, impressions, cost, conversions on by ad_network and ad_group_id</li> <li><code>conversion_action</code> - extracts all_conversions by conversion_id and account_id</li> <li><code>mapping</code> - performance mapping between ad_group_id, ad_group_name, campaign_id, campaign_name, campaign_status, account_id, account_name</li> </ul>"},{"location":"exporter/collectors/#disapprovals","title":"disapprovals","text":"<ul> <li><code>ad_disapprovals</code> - extracts approval_status, review_status, topic, topic_type by ad_group_id and ad_id only for not approved ads</li> <li><code>ad_group_ad_asset_disapprovals</code> - extracts approval_status, review_status, topic, topic_type by ad_group_id and asset_id only for enabled assets.</li> <li><code>sitelink_disapprovals</code> - extracts approval_status, review_status, topic, topic_type by asset_id,   sitelink_title and both sitelink descriptions only for not approved sitelinks.</li> <li><code>pmax_disapprovals</code> - extracts approval_status, review_status, topic, topic_type by asset_id,   asset_group_id for active asset group assets.</li> </ul>"},{"location":"exporter/collectors/#app","title":"app","text":"<ul> <li><code>app_campaign_mapping</code> - performs mapping between campaign_id, app_id, app_store, and bidding_strategy only for active campaigns.</li> <li><code>app_asset_mapping</code> - performs mapping between asset_id and its type, source, and content (name, text, video_id) only for app assets (HTML5, TEXT, IMAGE, VIDEO).</li> <li><code>asset_performance</code> - extracts clicks, impressions, cost, installs, inapps, and conversions_value by ad_group_id, ad_network and asset_id</li> <li><code>asset_perf_label</code> - extracts performance_label by ad_group_id and asset_id</li> </ul>"},{"location":"exporter/collectors/#pmax","title":"pmax","text":"<ul> <li><code>pmax_mapping</code> - performs mapping between asset_group_id, asset_group_name, and meta information on campaign and account only for active campaigns and enabled asset groups.</li> <li><code>pmax_performance</code> - extracts clicks, impressions, cost, installs, inapps, and conversions_value by asset_group_id.</li> <li><code>pmax_disapprovals</code> - extracts approval_status, review_status, topic, topic_type by asset_id,   asset_group_id for active asset group assets.</li> </ul>"},{"location":"exporter/collectors/#search","title":"search","text":"<ul> <li><code>search_terms</code> - extracts clicks, impressions, cost, conversions on by search_term and ad_group_id</li> <li><code>search_terms_conversion_split</code> - extracts all_conversions by search_term and conversion_id on ad_group_id level</li> <li><code>keywords</code> - extracts clicks, impressions, cost, conversions, and historical auality_score  by keyword and match_type on ad_group level.</li> <li><code>keywords_conversion_split</code> - extracts all_conversions by keyword and match_type on ad_group level.</li> </ul>"},{"location":"exporter/collectors/#placements","title":"placements","text":"<ul> <li><code>placements</code> - extracts clicks, impressions, cost, conversions on by placement_name and placement_type for each account.</li> <li><code>placements_conversion_split</code> - extracts all_conversions by placement_type and placement_type for each account.</li> </ul>"},{"location":"exporter/collectors/#demographics","title":"demographics","text":"<ul> <li><code>age</code> - extracts clicks, impressions, cost, conversions by age_range and campaign_id</li> <li><code>age_conversion_split</code> - extracts all_conversions by age_range and conversion_id on campaign_id level</li> <li><code>gender</code> - extracts clicks, impressions, cost, conversions by gender and campaign_id</li> <li><code>gender_conversion_split</code> - extracts all_conversions by gender and conversion_id on campaign_id level</li> </ul>"},{"location":"exporter/collectors/#geo","title":"geo","text":"<ul> <li><code>user_location</code> - extracts clicks, impressions, cost, conversions by country_id and campaign_id only for active campaigns.</li> <li><code>user_location_conversion_split</code> - extracts all_conversions by country_id  and campaign_idonly for active campaigns.</li> </ul>"},{"location":"exporter/collectors/#collectors-without-registry","title":"collectors without registry","text":"<ul> <li><code>bid_budgets</code> - extracts current values of bid (target_cpa, target_roas) and campaign budgets.</li> <li><code>bids</code> - extracts current values of bid (target_cpa, target_roas).</li> <li><code>budgets</code> - extracts current values of campaign budgets.</li> <li><code>account_status</code> - extracts customer_status for each account.</li> <li><code>campaign_service_status</code> - extracts primary_status for each campaign.</li> </ul>"},{"location":"exporter/config/","title":"Exporter Config","text":"<p>Instead of using collectors you can use <code>gaarf_exporter.yaml</code> file.</p> <p><code>gaarf_exporter.yaml</code> can be used to configure <code>gaarf_exporter</code> to execute a particular GAQL-query (based on gaarf syntax).</p> <p>It contains one or more queries with dimensions and metrics to be exposed to Prometheus.</p> <pre><code>- name: query_name\n  query: |\n    SELECT\n        customer.id AS customer_id,\n        campaign.id AS campaign_id,\n        ad_group.id AS ad_group_id,\n        segments.ad_network_type AS network,\n        metrics.clicks AS clicks,\n        metrics.impressions AS impressions,\n        metrics.conversions AS conversions,\n        metrics.conversions_value AS conversions_value,\n        metrics.cost_micros / 1e6 AS cost\n    FROM ad_group\n    WHERE\n        segments.date DURING TODAY\n        AND campaign.status = ENABLED\n        AND ad_group.status = ENABLED\n        AND metrics.impressions &gt; 0\n  suffix: custom-suffix\n</code></pre> <p><code>queries</code> must contains at least one key that identifies data being fetched from Google Ads and consist of the following elements.</p> <ul> <li><code>&lt;query_name&gt;</code> (i.e. <code>performance</code>)</li> <li><code>query</code> - text of a query (based on gaarf syntax).</li> <li><code>suffix</code> - custom suffix for the metrics for the query.</li> <li>By default <code>suffix</code> is the same and query name; so if you have a query <code>placements</code>   the metric in Prometheus will look like <code>googleads_placements_impressions</code>.</li> <li>If you specify <code>suffix</code> (i.e. <code>plc</code>) the metrics will look like <code>googleads_plc_impressions</code>.</li> <li>You can remove suffix for some generic metrics by specifying <code>suffix: Remove</code>, in that case metric will look like <code>googleads_impressions</code>.</li> </ul> <p>Query: how to define metrics and labels</p> <p>By default every element field in the query that starts with <code>metrics</code> will be treated as metric that needs to be exposed to Prometheus. Every virtual column will be treated as metric as well. The rest will be a label for the metrics defined in the query.</p> <p><code>gaarf_exporter</code> currently works with Gauges.</p>"},{"location":"exporter/gaarf/","title":"Gaarf Exporter","text":"<p>gaarf exporter - Prometheus exporter for Google Ads.</p> <p> </p>"},{"location":"exporter/gaarf/#installation","title":"Installation","text":"pip <pre><code>pip install gaarf-exporter\n</code></pre>"},{"location":"exporter/gaarf/#usage","title":"Usage","text":"<p>You can use <code>gaarf-exporter</code> both locally and in Docker container.</p> <p>By default it will start http_server on <code>localhost:8000</code> and will push some basic metrics to it.</p> locallydocker <pre><code>gaarf-exporter\n</code></pre> <pre><code>docker run --network=host \\\n  -v /path/to/google-ads.yaml:/google-ads.yaml \\\n  -v `pwd`/gaarf_exporter.yaml:/app/gaarf_exporter.yaml \\\n  gaarf_exporter\n</code></pre>"},{"location":"exporter/gaarf/#customization","title":"Customization","text":"<ul> <li><code>--ads-config</code> - path to <code>google-ads.yaml</code> <p><code>ads-config</code> can be taken from local storage or remote storage (gs, s3, azure, ssh, stfp, scrp, hdfs, webhdfs).</p> </li> <li><code>--config</code> - path to <code>gaarf_exporter.yaml</code> <p><code>config</code> can be taken from local storage or remote storage (same as <code>--ads-config</code>).</p> </li> <li><code>--collectors</code> - names of one or more collectors (separated by comma).</li> <li><code>--expose-type</code> - type of exposition (<code>http</code> or <code>pushgateway</code>, <code>http</code> is used by default)</li> <li><code>--host</code> - address of your http server (<code>localhost</code> by default)</li> <li><code>--port</code> - port of your http server (<code>8000</code> by default)</li> <li><code>--delay-minutes</code> - delay in minutes between scrapings (<code>15</code> by default)</li> </ul>"},{"location":"exporter/gaarf/#macros","title":"Macros","text":""},{"location":"exporter/gaarf/#customizing-fetching-dates","title":"Customizing fetching dates","text":"<p>By default <code>gaarf-exporter</code> fetches performance data for TODAY; if you want to customize it you can provide optional flags: * <code>--macro.start_date=:YYYYMMDD-N</code>, where <code>N</code> is number of days starting from today * <code>--macro.end_date=:YYYYMMDD-M</code>, where <code>N</code> is number of days starting from today</p> <p>It will add an additional metric to be exposed to Prometheus <code>*_n_days</code> (i.e. <code>googleads_clicks_n_days</code>).</p>"}]}